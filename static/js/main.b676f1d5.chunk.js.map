{"version":3,"sources":["components/FormInput.js","components/DisplayResult.js","components/App.js","serviceWorker.js","index.js"],"names":["FormInput","handleInputChange","evt","selectedBarbellWeight","target","value","props","onToggleBarbellWeight","onSubmit","this","onCalculateWeight","className","barbellWeight","type","pattern","targetWeight","onChange","setWeight","Component","DisplayResult","weightObj","calculatedWeights","remainingWeight","Alert","variant","closestWeight","map","item","key","weight","count","App","setState","validate","isError","state","visible","preventDefault","calculateTotal","singleSide","availableWeights","forEach","Math","floor","push","localStorage","setItem","barbellWeightOptions","getItem","handleToggleBarbellWeight","show","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b676f1d5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass FormInput extends Component {\n\thandleInputChange = evt => {\n\t\tlet selectedBarbellWeight = evt.target.value;\n\t\tthis.props.onToggleBarbellWeight(selectedBarbellWeight);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.props.onCalculateWeight}>\n\t\t\t\t{/* <div className=\"form-group\">\n\t\t\t\t\t\t<h5>Select starting barbell weight:</h5>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"form-check form-check-inline\"\n\t\t\t\t\t\t\tstyle={{ alignItems: \"center\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\tclassName=\"form-check-input\"\n\t\t\t\t\t\t\t\tid={this.props.barbellWeightOptions[0]}\n\t\t\t\t\t\t\t\tvalue={this.props.barbellWeightOptions[0]}\n\t\t\t\t\t\t\t\tname=\"barbell-weight-input\"\n\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<label className=\"form-check-label\">30lbs</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\tclassName=\"form-check-input\"\n\t\t\t\t\t\t\t\tid={this.props.barbellWeightOptions[1]}\n\t\t\t\t\t\t\t\tvalue={this.props.barbellWeightOptions[1]}\n\t\t\t\t\t\t\t\tname=\"barbell-weight-input\"\n\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t\t\t\tdefaultChecked\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<label className=\"form-check-label\">45lbs</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div> */}\n\t\t\t\t\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<h5>Enter target weight:</h5>\n\t\t\t\t\t<p><em>Note: This calculator assumes the barbell weight is {this.props.barbellWeight} lbs.</em></p>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tpattern=\".*\\d\"\n\t\t\t\t\t\tvalue={this.props.targetWeight}\n\t\t\t\t\t\tonChange={this.props.setWeight}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"btn btn-info\">Calculate!</button>\n\t\t\t\t\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default FormInput;\n","import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nclass DisplayResult extends Component {\n\trender() {\n\t\tlet weightObj = this.props.calculatedWeights;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.props.remainingWeight ? <Alert variant=\"warning\">Unable to load {this.props.remainingWeight} lb to barbell. Add the weights below to get {this.props.closestWeight} lb.</Alert> : null}\n\t\t\t\t<table className=\"table\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Plate Weight</th>\n\t\t\t\t\t\t\t<th>Count</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{weightObj.map(item => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={item.weight}>\n\t\t\t\t\t\t\t\t\t<td>{item.weight}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.count}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DisplayResult;\n","import React, { Component } from \"react\";\nimport FormInput from \"./FormInput\";\nimport DisplayResult from \"./DisplayResult\";\nimport Alert from \"react-bootstrap/Alert\";\nimport \"./App.css\";\n\nconst DEFAULT_BARBELL_WEIGHT = 45;\nconst DEFAULT_INPUT_WEIGHT = 225;\nconst INPUT_WEIGHT_ID = \"input-weight-id\";\n// const BARBELL_WEIGHT_ID = \"barbell-weight-id\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tavailableWeights: [45, 25, 10, 5, 2.5],\n\t\t\tbarbellWeightOptions: [30, 45],\n\t\t\t// barbellWeight: null || DEFAULT_BARBELL_WEIGHT,\n\t\t\tbarbellWeight: DEFAULT_BARBELL_WEIGHT,\n\t\t\ttargetWeight:\n\t\t\t\tlocalStorage.getItem(INPUT_WEIGHT_ID) || DEFAULT_INPUT_WEIGHT,\n\t\t\tcalculatedWeights: [],\n\t\t\tclosestWeight: 0,\n\t\t\tremainingWeight: 0,\n\t\t\tvisible: false\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.calculateTotal();\n\t}\n\n\t/*\n\thandleToggleBarbellWeight = weight => {\n\t\tthis.setState({ barbellWeight: weight });\n\t};\n\t*/\n\n\tsetWeight = evt => {\n\t\tthis.setState({ targetWeight: evt.target.value });\n\t};\n\n\tvalidate = () => {\n\t\tlet isError = false;\n\t\tif (this.state.targetWeight <= this.state.barbellWeight) {\n\t\t\tisError = true;\n\t\t}\n\t\tthis.setState({\n\t\t\tvisible: isError\n\t\t});\n\n\t\treturn isError;\n\t};\n\n\tonCalculateWeight = evt => {\n\t\tevt.preventDefault();\n\n\t\tlet err = this.validate();\n\n\t\tif (!err) {\n\t\t\tthis.setState({\n\t\t\t\tvisible: false\n\t\t\t});\n\t\t\tthis.calculateTotal();\n\t\t}\n\t};\n\n\tcalculateTotal = () => {\n\t\tconst calculatedWeights = [];\n\t\tlet singleSide =\n\t\t\t(this.state.targetWeight - this.state.barbellWeight) / 2;\n\n\t\tthis.state.availableWeights.forEach(weight => {\n\t\t\tlet count = Math.floor(singleSide / weight);\n\t\t\tsingleSide -= weight * count;\n\t\t\tcalculatedWeights.push({\n\t\t\t\tweight,\n\t\t\t\tcount\n\t\t\t});\n\t\t});\n\n\t\tthis.setState({\n\t\t\tcalculatedWeights,\n\t\t\tclosestWeight: this.state.targetWeight - singleSide * 2,\n\t\t\tremainingWeight: singleSide * 2\n\t\t});\n\n\t\tlocalStorage.setItem(INPUT_WEIGHT_ID, this.state.targetWeight);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"App-content\">\n\t\t\t\t\t<div className=\"App-header\">\n\t\t\t\t\t\t<h1 className=\"App-title\">\n\t\t\t\t\t\t\tBarbell Loading Calculator\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"App-input\">\n\t\t\t\t\t\t<div className=\"target-weight\">\n\t\t\t\t\t\t\t<FormInput\n\t\t\t\t\t\t\t\tonToggleBarbellWeight={\n\t\t\t\t\t\t\t\t\tthis.handleToggleBarbellWeight\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbarbellWeightOptions={\n\t\t\t\t\t\t\t\t\tthis.state.barbellWeightOptions\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonCalculateWeight={this.onCalculateWeight}\n\t\t\t\t\t\t\t\ttargetWeight={this.state.targetWeight}\n\t\t\t\t\t\t\t\tbarbellWeight={this.state.barbellWeight}\n\t\t\t\t\t\t\t\tsetWeight={this.setWeight}\n\t\t\t\t\t\t\t\tvisible={this.state.visible}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Alert variant=\"danger\" show={this.state.visible}>\n\t\t\t\t\t\tUnable to calculate target weight.\n\t\t\t\t\t</Alert>\n\t\t\t\t\t<div className=\"App-result\">\n\t\t\t\t\t\t{!this.state.visible ? (\n\t\t\t\t\t\t\t<DisplayResult\n\t\t\t\t\t\t\t\ttargetWeight={this.state.targetWeight}\n\t\t\t\t\t\t\t\tbarbellWeight={this.state.barbellWeight}\n\t\t\t\t\t\t\t\tcalculatedWeights={this.state.calculatedWeights}\n\t\t\t\t\t\t\t\tclosestWeight={this.state.closestWeight}\n\t\t\t\t\t\t\t\tremainingWeight={this.state.remainingWeight}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}